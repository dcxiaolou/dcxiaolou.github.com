<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[FastDFS文件服务器]]></title>
    <url>%2F2019%2F10%2F21%2FFastDFS%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[FastDFS介绍FastDFS是一个由 C 语言实现的开源轻量级分布式文件系统，作者余庆(happyfish100)，支持 Linux、FreeBSD、AID 等 Unix 系统，解决了大数据存储和读写负载均衡等问题，适合存储 4KB~500MB 之间的小文件，如图片网站、短视频网站、文档、app 下载站等，UC、京东、支付宝、迅雷、酷狗等都有使用。 FastDFS上传的流程 FastDFS架构包括 Tracker server和Storage server。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。 Tracker Server作用是负载均衡和调度，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务。可以将tracker称为追踪服务器或调度服务器。 Storage Server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将storage称为存储服务器。 FastDFS下载的流程 FastDFS的安装安装顺序 libfastcommon fdfs_tracker 依赖：Gcc、libevent、perl fdfs_storage FastDFS-nginx-module nginx 依赖：pcre-develzlib-devel 功能文件目录opt/fastdfs 数据存储目录 usr/local/fdfs 启动文件目录 etc/fdfs 配置文件目录 usr/bin/fdfs_trackerd 启动配置 etc/init.d/fdfs_trackerd 启动服务脚本 FastDFS–tracker安装FastDFS安装环境 FastDFS是C语言开发，建议在linux上运行，本教程使用Centos7.4作为安装环境。 安装gcc 依赖环境 yum install gcc-c++ -y libevent yum -y install libevent 如果没有perl库，需要使用yum install perl* 命令安装一下 yum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget 安装libfastcommon 上传压缩包文件libfastcommonV1.0.7.tar.gz 到 /usr/local目录下，并解压。 tar -zxvf libfastcommonV1.0.7.tar.gz 进入到解压后的文件夹中 进行编译 ./make.sh 如果出现编译perl 不识别 运行下面这段命令 # yum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget 安装 ./make.sh install 注意：libfastcommon安装好后会自动将库文件拷贝至/usr/lib64下，由于FastDFS程序引用usr/lib目录所以需要将/usr/lib64下的库文件拷贝至/usr/lib下。 安装tracker 上传资料FastDFS_v5.05.tar.gz到 /usr/local 目录下 解压编译安装 tar -zxvf FastDFS_v5.05.tar.gz cd FastDFS ./make.sh ./make.sh install 安装成功之后，将安装目录下的conf下的文件拷贝到/etc/fdfs/下。 cd conf cp * /etc/fdfs/ 修改配置文件 vim /etc/fdfs/tracker.conf 在/opt/下创建fastdfs文件夹 mkdir /opt/fastdfs 设置启动项 启动服务 mkdir /usr/local/fdfs 拷贝安装目录下stop.sh 和restart.sh 到/usr/local/fdfs/ cp restart.sh /usr/local/fdfs/ cp stop.sh /usr/local/fdfs/ 修改启动脚本 vim /etc/init.d/fdfs_trackerd 把启动脚本中的路径按照上图修改 修改完毕后 注册服务 chkconfig –add fdfs_trackerd 然后可以用service fdfs_trackerd start 启动测试 如下图 FastDFS—storage配置修改配置文件 vim /etc/fdfs/storage.conf 创建fdfs_storage文件夹 mkdir /opt/fastdfs/fdfs_storage 设置服务 vim /etc/init.d/fdfs_storaged chkconfig - -add fdfs_storaged 启动服务 service fdfs_storaged start 上传图片测试 FastDFS安装成功可通过/usr/bin/fdfs_test测试上传、下载等操作。 修改/etc/fdfs/client.conf [root@localhost ~]# vim /etc/fdfs/client.conf base_path=/opt/fastdfs tracker_server=192.168.67.163:22122 比如将/root下的日志上传到FastDFS中： /usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/winteriscoming.jpg 对应的上传路径： /opt/fastdfs/fdfs_storage/data /00/00/wKhDo1qipbiAJC6iAAB1tayPlqs094_big.jpg FastDFS整合nginx 安装nginx整合插件fastdfs-nginx-module 上传fastdfs-nginx-module_v1.16.tar.gz上传到 /usr/local，并解压 tar -zxvf fastdfs-nginx-module_v1.16.tar.gz 编辑配置文件：修改config文件将/usr/local/路径改为/usr/ (这里要修改三个路径) vim fastdfs-nginx-module/src/config 将FastDFS-nginx-module/src下的mod_fastdfs.conf拷贝至/etc/fdfs/下 [root@localhost src]# cp mod_fastdfs.conf /etc/fdfs/ 并修改mod_fastdfs.conf的内容： vim /etc/fdfs/mod_fastdfs.conf 继续修改 继续修改 url中包含group名称 继续修改 #指定文件存储路径 将libfdfsclient.so拷贝至/usr/lib下 [root@localhost src]# cp /usr/lib64/libfdfsclient.so /usr/lib/ 安装nginx创建nginx/client目录 [root@localhost src]# mkdir -p /var/temp/nginx/client 安装环境 安装pcre库 yum -y install pcre-devel 安装zlib库 yum install -y zlib-devel 上传nginx 上传nginx压缩包到/usr/local目录下，解压 tar -zxvf nginx-1.12.2.tar.gz 添加fastdfs-nginx-module模块 cd nginx-1.8.0 12345678910111213./configure \--prefix=/usr/local/nginx \--pid-path=/var/run/nginx/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi \--add-module=/usr/local/fastdfs-nginx-module/src 配置成功 编译 [root@localhost nginx-1.12.2]# make 安装 [root@localhost nginx-1.12.2]# make install 编辑nginx.conf vim /usr/local/nginx/conf/nginx.conf 启动nginx /usr/local/nginx/sbin/nginx 设置开机启动 [root@iZ2zednyjjxxq7k3i2dwsfZ nginx-1.12.2]# vim /etc/rc.d/rc.local 需要关闭防火墙 service iptables stop 永久关闭 chkconfig iptables off 测试 /usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/ty.jpg 使用Java客户端调用FastDFS加载Maven依赖 fastdfs 没有在中心仓库中提供获取的依赖坐标。 只能自己通过源码方式编译，打好jar 包，安装到本地仓库。 官方仓库地址： https://github.com/happyfish100/fastdfs-client-java 直接用idea 直接把这个源码作为模块导入工程 别的不用改，只把pom.xml中的版本改成1.27。 然后右边 执行install 就好了 安装好了 ，别的模块就可以直接使用这个坐标了。 12&lt;**groupId**&gt;org.csource&lt;/**groupId**&gt; &lt;**artifactId**&gt;fastdfs-client-java&lt;/**artifactId**&gt; &lt;**version**&gt;1.27&lt;/**version**&gt; 而这个fastdfs-client-java模块可以从idea 中删除。 12345678910111213141516@RunWith(SpringRunner.class)@SpringBootTest@Testpublic void textFileUpload() throws IOException, MyException &#123; String file = this.getClass().getResource("/tracker.conf").getFile(); ClientGlobal.init(file); TrackerClient trackerClient=new TrackerClient(); TrackerServer trackerServer=trackerClient.getConnection(); StorageClient storageClient=new StorageClient(trackerServer,null); String orginalFilename="e://victor.jpg"; String[] upload_file = storageClient.upload_file(orginalFilename, "jpg", null); for (int i = 0; i &lt; upload_file.length; i++) &#123; String s = upload_file[i]; System.out.println("s = " + s); &#125;&#125; 配置tracker.conf文件 1234567tracker_server=192.168.67.162:22122# 连接超时时间，针对socket套接字函数connect，默认为30秒connect_timeout=30000# 网络通讯超时时间，默认是60秒network_timeout=60000 打印结果 这个打印结果实际上就是我们访问的路径，加上服务器地址我们可以拼接成一个字符串 http://192.168.67.163/group1/M00/00/00/wKhDo1qjU2qAWKQmAAATla901AQ534.jpg 直接放到浏览器去访问 对接到业务模块中 在修改FileUploadController的方法 123456789101112131415161718192021222324@Value("$&#123;fileServer.url&#125;")String fileUrl;@RequestMapping(value = "fileUpload",method = RequestMethod.POST)public String fileUpload(@RequestParam("file") MultipartFile file) throws IOException, MyException &#123; String imgUrl=fileUrl; if(file!=null)&#123; System.out.println("multipartFile = " + file.getName()+"|"+file.getSize()); String configFile = this.getClass().getResource("/tracker.conf").getFile(); ClientGlobal.init(configFile); TrackerClient trackerClient=new TrackerClient(); TrackerServer trackerServer=trackerClient.getConnection(); StorageClient storageClient=new StorageClient(trackerServer,null); String filename= file.getOriginalFilename(); String extName = StringUtils.substringAfterLast(filename, "."); String[] upload_file = storageClient.upload_file(file.getBytes(), extName, null); imgUrl=fileUrl ; for (int i = 0; i &lt; upload_file.length; i++) &#123; String path = upload_file[i]; imgUrl+="/"+path; &#125; &#125; 利用@Value(“${fileServer.url}”)标签可以引用application.properties中的值]]></content>
      <categories>
        <category>FastDFS</category>
        <category>文件服务器</category>
      </categories>
      <tags>
        <tag>FastDFS</tag>
        <tag>文件服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿京东商城项目之pms后台管理（三）]]></title>
    <url>%2F2019%2F10%2F21%2F%E4%BB%BF%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E4%B9%8Bpms%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[pms整体业务 三级分类的查询 商品的平台属性列表的增删改查 商品spu的添加 spu列表查询 spu的销售属性、属性值、图片上传 商品sku的添加 sku信息、关联的销售属性、关联的平台属性、图片 pms数据库表的设计基本信息—分类一般情况可以分为两级或者三级。该项目一共分为三级，即一级分类、二级分类、三级分类。 比如：家用电器是一级分类，电视是二级分类，那么超薄电视就是三级分类。 数据库结构 基本信息—平台属性平台属性和平台属性值 平台属性和平台属性值主要用于商品的检索，每个三级分类对应的属性都不同。 而每个商品对应的每种属性都有对应的属性值。 比如电脑整机的一级分类下，有笔记本、游戏本、台式机、一体机的二级分类。 笔记本这个二级分类又包含了处理器、屏幕尺寸、内存容量、硬盘容量、显卡类别这些属性。 那么针对联想某个型号的笔记本，它作为笔记本这种分类，每个分类属性都有对应的值，cpu(属性)是i7(属性值)的，内存(属性)是8G(属性值)的，屏幕尺寸(属性)是14寸(属性值)的。 基本信息—销售属性销售属性，就是商品详情页右边，可以通过销售属性来定位一组spu下的哪款sku。可以让当前的商品详情页，跳转到自己的“兄弟”商品。 销售属性与平台属性 ​ 一般每种商品的销售属性不会太多，大约1-4种。整个电商的销售属性种类也不会太多，大概10种以内。比如：颜色、尺寸、版本、套装等等。不同销售属性的组合也就构成了一个spu下多个sku的结构。 基本信息—spu与 skuSPU(Standard Product Unit)：标准化产品单元。是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。 SKU=Stock Keeping Unit（库存量单位）。即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。SKU这是对于大型连锁超市DC（配送中心）物流管理的一个必要的方法。现在已经被引申为产品统一编号的简称，每种产品均对应有唯一的SKU号。 比如，咱们购买一台iPhoneX手机，iPhoneX手机就是一个SPU，但是你购买的时候，不可能是以iPhoneX手机为单位买的，商家也不可能以iPhoneX为单位记录库存。必须要以什么颜色什么版本的iPhoneX为单位。比如，你购买的是一台银色、128G内存的、支持联通网络的iPhoneX ，商家也会以这个单位来记录库存数。那这个更细致的单位就叫库存单元（SKU）。 首先通过检索搜索出来的商品列表中，每个商品都是一个sku。每个sku都有自己独立的库存数。也就是说每一个商品详情展示都是一个sku。 那spu又是干什么的呢？ 一般的电商系统你点击进去以后，都能看到这个商品关联了其他好几个类似的商品，而且这些商品很多的信息都是共用的，比如商品图片，海报、销售属性等。 ​ 那么系统是靠什么把这些sku识别为一组的呢，那是这些sku都有一个公用的spu信息。而它们公共的信息，都放在spu信息下。 pms数据模型根据以上的需求，以此将关联的数据库表结构设计为如下： 后台管理模块开发搭建后台的manage-web模块 application.properties 12345678910111213server.port=8083spring.thymeleaf.cache=falsespring.thymeleaf.mode=LEGACYHTML5spring.dubbo.application.name=manage-webspring.dubbo.registry.protocol=zookeeperspring.dubbo.registry.address=192.168.67.159:2181spring.dubbo.base-package=com.dcxiaolou.tinyjdspring.dubbo.protocol.name=dubbospring.dubbo.consumer.timeout=10000spring.dubbo.consumer.check=false 搭建后台的manage-service模块 application.properties 12345678910111213server.port=8073logging.level.root=debugspring.dubbo.application.name=manage-servicespring.dubbo.registry.protocol=zookeeperspring.dubbo.registry.address=192.168.67.159:2181spring.dubbo.base-package=com.dcxiaolou.tinyjdspring.dubbo.protocol.name=dubbospring.datasource.url=jdbc:mysql://192.168.159.3:3306/tinyjd?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.jdbc.Driver]]></content>
      <categories>
        <category>个人项目</category>
        <category>电商</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
        <tag>电商</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo简介]]></title>
    <url>%2F2019%2F10%2F20%2FDubbo%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Dubbo 简介 Dubbo: 一个分布式、高性能、透明化的RPC服务框架 RPC(Remote Procedure Call Protocol)指远程过程调用协议 RPC解析: 客户端通过互联网调用远程服务器，不知道远程服务器具体实现，只知道远程服务器提供了什么功能 RPC最大优点: 数据安全性 作用: 提供服务自动注册、自动发现等高效服务治理方案 Dubbo的基本概念 ​ 服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。 ​ 服务消费者（Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 ​ Container：Dubbo容器，依赖于 Spring 容器 ​ 注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者 ​ 监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心 ​ 虚线都是异步访问，实线都是同步访问 ​ 蓝色虚线:在启动时完成的功能 ​ 绿色虚线(实线)都是程序运行过程中执行的功能 ​ 所有的角色都是可以在单独的服务器上.所以必须遵守特定的协议. 调用关系说明 服务容器负责启动，加载，运行服务提供者。 服务提供者在启动时，向注册中心注册自己提供的服务。 服务消费者在启动时，向注册中心订阅自己所需的服务。 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。 Dubbo 支持的注册中心 Zookeeper 优点:支持网络集群 缺点:稳定性受限于Zookeeper Redis 优点:性能高. 缺点:对服务器环境要求较高. Multicast 优点:免中心化,不需要额外安装软件. 缺点:建议同机房(局域网)内使用 Simple 适用于测试环境.不支持集群. Dubbo 支持的协议 Dubbo Dubbo官方推荐的协议. 本质:使用NIO和线程池进行处理. 缺点:大文件传输时可能出现文件传输失败问题. RMI JDK提供的协议,远程方法调用协议. 缺点:偶尔连接失败. 优点:JDK原生,不需要进行额外配置(导入jar) Hession 优点:基于http协议,http请求支持. 缺点:需要额外导入jar,并在短连接时性能低 如何在项目中引入 dubbodubbo其实是一组jar包，通过maven引入就可以。 1234567891011121314151617181920212223242526272829&lt;properties&gt; &lt;dubbo-starter.version&gt;1.0.10&lt;/dubbo-starter.version&gt; &lt;dubbo.version&gt;2.6.0&lt;/dubbo.version&gt; &lt;zkclient.version&gt;0.10&lt;/zkclient.version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;$&#123;zkclient.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.gitee.reger&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt; &lt;version&gt;$&#123;dubbo-starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; 注册中心为 Zookeeper Provider（服务提供方）相关配置 123456789spring: dubbo: application: name: cart-service protocol: dubbo registry: protocol: zookeeper address: 192.168.159.3:2181 base-package: com.dcxiaolou.tinyJD Consumer（服务消费方）相关配置 123456789101112spring: dubbo: application: name: cart-web protocol: dubbo registry: protocol: zookeeper address: 192.168.159.3:2181 consumer: timeout: 600000 check: false base-package: com.dcxiaolou.tinyJD 配置说明： application.name 是服务名，不能跟别的dubbo提供端重复 registry.protocol 是指定注册中心协议 registry.address 是注册中心的地址加端口号 protocol.name 是分布式固定是dubbo,不要改 base-package 注解方式要扫描的包 port 是服务提供端为zookeeper暴露的端口，不能跟别的dubbo提供端重复 consumer.timeout 是访问提供端服务的超时时间，默认是1000毫秒 consumer.check 是启动消费端时，是否检查服务端能否正常访问。如果选择true，那启动消费端时，必须保证提供端服务正常，否则接口无法注入。 dubbo的使用分为提供端和消费端。消费端的注解为@Reference，提供端的注解为@Service（注意不要引入spring的包，而是alibaba.dubbo对应的包） Dubbo Admin 管理界面本质就是一个web项目，获取注册中心内Provider注册的信息用页面呈现出来 实现步骤 把dubbo-admin-2.5.3.war上传到服务器tomcat中. 启动tomcat完成后关闭tomcat，删除上传的dubbo-admin-2.5.3.war 为什么要删除:需要修改解压后的文件夹，如果不删除.war文件，下次重启tomcat会还原成未修改状态 进入dubbo-admin-2.5.3/WEB-INF/dubbo.properties,修改第一行为zookeeper的ip和端口 第二行和第三行为管理界面的用户名和密码 启动tomcat, 在浏览器地址栏访问tomcat中dubbo项目 dubbo 与 springcloud 的区别Dubbo出于阿里系，是阿里巴巴服务化治理的核心框架，并被广泛应用于中国各互联网公司；只需要通过spring配置的方式即可完成服务化，对于应用无入侵。框架本身的成熟度以及文档的完善程度，完全能满足各大互联网公司的业务需求。但如果我们需要使用配置中心、分布式跟踪这些内容都需要自己去集成，这样无形中增加了使用Dubbo 的难度。 Spring Cloud 是大名鼎鼎的 Spring 家族的产品， 专注于企业级开源框架的研发。Spring Cloud 自从发展到现在，仍然在不断的高速发展，几乎考虑了服务治理的方方面面，开发起来非常的便利和简单。Spring Cloud更新的非常快，企业需要根据自身的研发水平和所处阶段选择合适的架构来解决业务问题，不管是Dubbo还是Spring Cloud都是实现微服务有效的工具。]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿京东管理项目之架构（二）]]></title>
    <url>%2F2019%2F10%2F20%2F%E4%BB%BF%E4%BA%AC%E4%B8%9C%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%9E%B6%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、分布式架构将各个应用通过分层独立出来，可以利用rpc实现web与service、service与service的互相调用，提高了代码的复用性。 缺点： 每个调用的模块要存储一份完整的被调用模块的位置和状态，一旦位置和状态发生变化，就要更新所有涉及的配置。 面向服务的分布式架构 随着架构不断增大，服务节点也越来越多，服务之间的调用和依赖关系也越来越复杂，需要有一个统一的中心来调度、路由、管理所有的服务，基于这个中心构建的这个星型架构就是现在目前最主流的SOA分布式架构。 二、分布式工程的模块搭建1 创建bean模块(与interface一起整合为api模块) bean模块的pom.xml 1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!--通用mapper--&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 由于依赖包分布于多个模块中，最好有一个地方能够把所有依赖的版本通用管理起来。 这就用到了maven的&lt;parent&gt;概念。可以让所有的模块都继承这个parent模块，由这个parent模块来管理版本。 2 搭建parent模块 parent模块的 pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.21.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-parent&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;fastjson.verion&gt;1.2.46&lt;/fastjson.verion&gt; &lt;dubbo-starter.version&gt;1.0.10&lt;/dubbo-starter.version&gt; &lt;dubbo.version&gt;2.6.0&lt;/dubbo.version&gt; &lt;zkclient.version&gt;0.10&lt;/zkclient.version&gt; &lt;mybatis.version&gt;1.3.1&lt;/mybatis.version&gt; &lt;nekohtml.verion&gt;1.9.20&lt;/nekohtml.verion&gt; &lt;xml-apis.version&gt;1.4.01&lt;/xml-apis.version&gt; &lt;batik-ext.version&gt;1.11&lt;/batik-ext.version&gt; &lt;jsoup.version&gt;1.11.2&lt;/jsoup.version&gt; &lt;httpclient.version&gt;4.5.5&lt;/httpclient.version&gt; &lt;commons-lang3.version&gt;3.7&lt;/commons-lang3.version&gt; &lt;mapper-starter.version&gt;1.2.3&lt;/mapper-starter.version&gt; &lt;jedis.version&gt;2.9.0&lt;/jedis.version&gt; &lt;jest.version&gt;5.3.3&lt;/jest.version&gt; &lt;jna.version&gt;4.5.1&lt;/jna.version&gt; &lt;beanUtils.version&gt;1.9.3&lt;/beanUtils.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;$&#123;fastjson.verion&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--zookeeper客户端工具--&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;$&#123;zkclient.version&#125;&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--SpringBoot整合Dubbo的中间包--&gt; &lt;groupId&gt;com.gitee.reger&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt; &lt;version&gt;$&#123;dubbo-starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--SpringBoot整合MyBatis的中间包--&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--Thymeleaf依赖包--&gt; &lt;dependency&gt; &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt; &lt;artifactId&gt;nekohtml&lt;/artifactId&gt; &lt;version&gt;$&#123;nekohtml.verion&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;xml-apis&lt;/groupId&gt; &lt;artifactId&gt;xml-apis&lt;/artifactId&gt; &lt;version&gt;$&#123;xml-apis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.xmlgraphics&lt;/groupId&gt; &lt;artifactId&gt;batik-ext&lt;/artifactId&gt; &lt;version&gt;$&#123;batik-ext.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.jsoup&lt;/groupId&gt; &lt;artifactId&gt;jsoup&lt;/artifactId&gt; &lt;version&gt;$&#123;jsoup.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--java发送http请求--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--java基本类型处理：if (StringUtils.isBlank(str)) --&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-lang3.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--通用mapper--&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mapper-starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--redis客户端--&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;$&#123;jedis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--elasticSearch--&gt; &lt;groupId&gt;io.searchbox&lt;/groupId&gt; &lt;artifactId&gt;jest&lt;/artifactId&gt; &lt;version&gt;$&#123;jest.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--elasticSearch依赖包字节码--&gt; &lt;groupId&gt;net.java.dev.jna&lt;/groupId&gt; &lt;artifactId&gt;jna&lt;/artifactId&gt; &lt;version&gt;$&#123;jna.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--用于操作JAVA BEAN的工具包--&gt; &lt;groupId&gt;commons-beanutils&lt;/groupId&gt; &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt; &lt;version&gt;$&#123;beanUtils.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 3 搭建util模块用于放置除了通用mapper以外其他的第三方依赖 可以把所有的第三方依赖包分为三种 web业务模块用到的第三方包,比如文件上传客户端、页面渲染工具、操作cookie的工具类等 service业务模块用到的第三方包，比如jdbc、mybatis、jedis、activemq工具包等 通用型的第三方包，比如fastjson、httpclient、apache工具包等 只有本模块用到的第三方包，比如es等 创建tinyjd-common-util模块、tinyjd-web-util模块、tinyjd–service-util模块 首先先分析具体哪些包是通用的 tinyjd-common-util 第三方包 说明 spring-boot-starter-test 测试(springboot有默认版本号) spring-boot-starter-web 内含tomcat容器、HttpSevrletRequest等 (springboot有默认版本号) fastjson json工具 commons-lang3 apache工具库 commons-beanutils apache处理实体bean工具库 commons-codec apache解码工具库 httpclient restful调用客户端 tinyjd-web-util 第三方包 说明 Thymeleaf springboot自带页面渲染工具(springboot有默认版本号) tinyjd–service-util 第三方包 说明 spring-boot-starter-jdbc 数据库驱动(springboot有默认版本号) mysql-connector-java 数据库连接器(springboot有默认版本号) mybatis-spring-boot-starter mybatis tinyjd-common-util的pom.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-parent&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-common-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.7&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-beanutils&lt;/groupId&gt; &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.46&lt;/version&gt; &lt;/dependency&gt; &lt;!--dubbo依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;2.6.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.gitee.reger&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt; &lt;version&gt;1.0.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; tinyjd-web-util的pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-parent&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-web-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;/thymeleaf.version&gt; &lt;!-- 布局功能的支持程序 thymeleaf3主程序 layout2以上版本 --&gt; &lt;!-- thymeleaf2 layout1--&gt; &lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;/thymeleaf-layout-dialect.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-common-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt; &lt;artifactId&gt;bootstrap&lt;/artifactId&gt; &lt;version&gt;4.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt; &lt;artifactId&gt;jquery&lt;/artifactId&gt; &lt;version&gt;3.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.9.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; tinyjd-service-util的pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-parent&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-service-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.dcxiaolou.tinyJD&lt;/groupId&gt; &lt;artifactId&gt;tinyjd-common-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--activemq--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt; &lt;version&gt;5.15.2&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;]]></content>
      <categories>
        <category>个人项目</category>
        <category>电商</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
        <tag>电商</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿京东商城项目之简介（一）]]></title>
    <url>%2F2019%2F10%2F18%2F%E4%BB%BF%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%AE%80%E4%BB%8B%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[代码存放地址：https://github.com/dcxiaolou/tinyJD 本次介绍的项目是一个综合性的B2C平台，非常类似京东商城 为什么要写仿京东商城项目？因为就互联网平台来说，电商网站有很多典型的特征： 访问量大 数据量大 并发高，实战性强 有一定的业务复杂性,技术点丰富 涉及支付考虑一定安全性 项目架构 功能流程 使用到的技术 功能展示友情提醒：以下 gif 图片较大，如果加载失败，请刷新页面或右键图片 —&gt; 在新标签页中打开图片 后台管理 前台功能 微博登录 添加商品及搜索 更多详细内容请访问 https://dcxiaolou.github.io/ 或 https://0teem0.coding-pages.com/]]></content>
      <categories>
        <category>个人项目</category>
        <category>电商</category>
      </categories>
      <tags>
        <tag>个人项目</tag>
        <tag>电商</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Flume将Kafka中的数据导入到HDFS时native-lzo library not available问题]]></title>
    <url>%2F2019%2F10%2F14%2F%E4%BD%BF%E7%94%A8Flume%E5%B0%86Kafka%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0HDFS%E6%97%B6native-lzo%20library%20not%20available%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[环境：jdk 1.8、Hadoop 2.7.2、Flume 1.7.0、Kafka 0.11.0.2 在 Hadoop 中使用了 LZO 来进行压缩 数据导入到 Kafka 后，使用 Flume 来消费Kafka中的数据，将数据导入到 HDFS 中 在导入的过程中出现错误 java.lang.RuntimeException: native-lzo library not available 错误，同时在 Hadoop 的 web 界面中可以看见很多以 .lzo.tmp 结尾的文件 解决：在使用 Flume 导入数据的节点上重新安装 LZO 和 LZOP 准备工作： yum -y install lzo-devel zlib-devel gcc autoconf automake libtool 安装 LZO wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gztar -zxvf lzo-2.06.tar.gz./configure -enable-shared -prefix=/opt/module/lzo/make &amp;&amp; make install 安装 LZOPwget http://www.lzop.org/download/lzop-1.03.tar.gztar -zxvf lzop-1.03.tar.gz./configure -enable-shared -prefix=/opt/module/lzop/make &amp;&amp; make install 把 LZOP 复制到/usr/bin/ ln -s /opt/module/lzop/bin/lzop /usr/bin/lzop 测试 LZOP lzop /tmp/logs/app-2019-01-01.log 会生成一个以 .lzo 为后缀的压缩文件：/tmp/logs/app-2019-01-01.log.lzo 安装Hadoop-lzo 先下载lzo的jar项目 https://github.com/twitter/hadoop-lzo/archive/master.zip 下载后的文件名是hadoop-lzo-master，它是一个zip格式的压缩包，先进行解压，然后用maven编译。生成hadoop-lzo-0.4.20.jar。 配置 Hadoop 在文件$HADOOP_HOME/etc/hadoop/hadoop-env.sh中追加如下内容： 1export LD_LIBRARY_PATH=/usr/local/hadoop/lzo/lib 在文件$HADOOP_HOME/etc/hadoop/core-site.xml中追加如下内容： 12345678910111213&lt;property&gt; &lt;name&gt;io.compression.codecs&lt;/name&gt; &lt;value&gt;org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.DefaultCodec, com.hadoop.compression.lzo.LzoCodec, com.hadoop.compression.lzo.LzopCodec, org.apache.hadoop.io.compress.BZip2Codec &lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;io.compression.codec.lzo.class&lt;/name&gt; &lt;value&gt;com.hadoop.compression.lzo.LzoCodec&lt;/value&gt;&lt;/property&gt; 在文件$HADOOP_HOME/etc/hadoop/mapred-site.xml中追加如下内容： 123456789101112&lt;property&gt; &lt;name&gt;mapred.compress.map.output&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapred.map.output.compression.codec&lt;/name&gt; &lt;value&gt;com.hadoop.compression.lzo.LzoCodec&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapred.child.env&lt;/name&gt; &lt;value&gt;LD_LIBRARY_PATH=/usr/local/hadoop/lzo/lib&lt;/value&gt; &lt;/property&gt; 最后重启 Hadoop 和 Flume 即可解决问题 参考： https://blog.csdn.net/zhangzhaokun/article/details/17595325]]></content>
      <categories>
        <category>Flume</category>
        <category>LZO</category>
      </categories>
      <tags>
        <tag>Flume</tag>
        <tag>LZO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora及Markdown语法]]></title>
    <url>%2F2019%2F09%2F19%2FTyproa%E5%8F%8AMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Typora是一款轻便简介的Markdown编辑器，支持即时渲染技术，所见即所得。 Typora能够插入本地图片和来自网络的图片，但是，如果编写完后的.md文件要进行网络传输则插入的本地图片将会显示不出来。要解决该问题可以使用图床，如PicGo。PicGo在上传图片之后会自动将图片的链接复制到粘贴板中，并支持微博图床、七牛图床、GitHub等8中图床。 除此之外，还可以使用坚果云等云存储工具作为网络存储来保存编写的文件，这样就不怕丢失了，还可以在手机端查看。 Markdown语法==注意：在编写Markdown语法时，要多注意空格和回车，否则无法生效== 标题#[空格]标题 123456# 一阶标题 或 Ctrl+1## 二阶标题 或 Ctrl+2### 三阶标题 或 Ctrl+3#### 四阶标题 或 Ctrl+4##### 五阶标题 或 Ctrl+5###### 六阶标题 或 Ctrl+6 字体加粗1**加粗内容** 或 快捷键Ctrl+B 高亮1==高亮== 下划线1&lt;u&gt;下划线的内容&lt;/u&gt; 或 Ctrl+U 斜体1*倾斜内容* 或 Ctrl+I 删除线1~~删除线的内容~~ 或 Alt+Shift+5 文本居中1&lt;center&gt;居中的文本内容&lt;/center&gt; 角标1x^2^ 上角标 H~2~O 下角标 自动生成目录1在顶部添加[toc] list有序1数字+英文小数点(.)+空格 list无序1+ 、- 、*、+空格 todoList-空格[空格]空格 12- [ ] 未勾选- [x] 勾选 table1234567Ctrl+T或使用markdown语法| Tables | Are | Cool ||----------|:-------------:|------:|| col 1 is | left-aligned | $1600 || col 2 is | centered | $12 || col 3 is | right-aligned | $1 | 其中----------或:----------为左对齐，:----------:为居中对齐，----------:为右对齐。 1234567891011121314151617181920212223也可以使用html&lt;table&gt; &lt;tr&gt; &lt;th&gt;Tables&lt;/th&gt; &lt;th&gt;Are&lt;/th&gt; &lt;th&gt;Cool&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;col 1 is&lt;/td&gt; &lt;td&gt;left-aligned&lt;/td&gt; &lt;td&gt;$1600&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;col 2 is&lt;/td&gt; &lt;td&gt;centered&lt;/td&gt; &lt;td&gt;$12&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;col 3 is&lt;/td&gt; &lt;td&gt;right-aligned&lt;/td&gt; &lt;td&gt;$1&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 插入图片12![标题](链接) 或 Ctrl+K也可将图片直接拖拽进来，自动生成链接 链接1[标题](链接 引用1&gt;+空格 角标12标号[^1][^1]:标号的含义 表情123:单词:如 :happy::arrow_down: 快捷键12345678Ctrl+1 一阶标题 Ctrl+2 二阶标题 Ctrl+3 三阶标题Ctrl+4 四阶标题 Ctrl+5 五阶标题 Ctrl+6 六阶标题Ctrl+B 字体加粗 Ctrl+I 字体倾斜 Ctrl+U 下划线Ctrl+Home 返回Typora顶部 Ctrl+End 返回Typora底部 Ctrl+T 创建表格Ctrl+L 选中某句话 Ctrl+D 选中某个单词 Ctrl+E 选中相同格式的文字Ctrl+K 创建超链接 Ctrl+F 搜索 Ctrl+H 搜索并替换Alt+Shift+5 删除线 Ctrl+Shift+I 插入图片 Ctrl+Shift+M 公式块Ctrl+Shift+Q 引用 Typroa支持的Markdown语法远不止这些，还支持数学公式、程序流程图、UML等的编写。]]></content>
      <categories>
        <category>Typora</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客并部署到GitHub和coding.net(GitCafe)]]></title>
    <url>%2F2019%2F09%2F19%2F%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%E5%92%8Ccoding.net(GitCafe)%2F</url>
    <content type="text"><![CDATA[最近在学习Flink时看到了一个阿里大佬的个人博客（Jark’s Blog）觉得挺不错的，界面简洁、优雅，内容干货满满。即可以记录自己学到的知识和生活中的点点滴滴，又可以分享给其他小伙伴。于是自己也想搭一个，en~那就开始吧。 Hexo的安装Hexo是高效的静态站点生成框架，基于Node.js，通过它可以快速构建个人博客，并搭建到GitHub或coding.net供他人访问。 安装Node.jd和Git windows：分别从nodejs官网下载LTS版本和Git官网下载git，然后安装即可。 windows安装完git后可以直接在git bash中写linux命令 安装hexo 1npm install -g hexo 初始化项目 hexo init 自动创建hexo项目，然后执行hexo s --debug启动hexo服务，可在本地通过http://localhost:4000查看效果，--debug参数可以查看详细的日志，不是必须的 部署到GitHub和coding.net 创建一个和用户名相同的仓库，后面加上.github.io，即xxx.github.io 生成SSH并添加到GitHub 配置信息 git config --global user.name &quot;yourname&quot; git config --global user.email &quot;youremail&quot; 生成秘钥 ssh-keygen -t rsa -C &quot;youremail&quot; 将id_rsa.pub中的公钥（全部复制）添加到GitHub和coding.net上 GitHub：点击头像 -&gt; Settings -&gt; SSH and GPG keys coding.net：点击头像 -&gt; 个人设置 -&gt; SSH公钥 使用ssh -T git@github.com查看是否成功 修改配置文件 _config.yml 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: https://github.com/username/username.github.io,master gitcafe: https://e.coding.net/username/username.git,master 推送 使用npm install hexo-deployer-git --save安装hexo部署工具 执行下面两个命令，就可以把项目自动部署到 github和coding.net上 123hexo cleanhexo generatehexo deploy 其中 hexo clean清除之前生成的东西，也可以不加，hexo generate 生成静态文章，可以用 hexo g缩写，hexo deploy 部署文章，可以用hexo d缩写。 注意deploy时需要输入username和password 成功之后可以使用https://username.github.io/访问部署在GitHub上的博客，使用https://randomCode.coding-pages.com/访问部署在coding.net上的博客（注意username的修改，coding.net上的访问地址要到部署 -&gt; 静态网站中查看）。 Hexo的基本使用以执行下列命令来创建一篇新文章或者新的页面 1$ hexo new [layout] &lt;title&gt; layout：指定文章的布局，默认为 post 接下来就可以使用Markdown工具编写在myBlog\source\_posts下的文章了 查看Hexo的官方文档，说明很详细 使用NexT主题查看NexT的官方文档，说明很详细 在使用NexT主题后遇到设置语言不生效的问题 1language: zh-Hans // 这里设置语言 简体中文 把theme/next/languages/目录下的zh-CN.yml文件改成名字为zh-Hans.yml就可以了 参考文档5分钟搞定个人博客-hexo hexo史上最全搭建教程 Hexo博客优化之Next主题美化 Hexo主题（Next）美化、配置、优化这一篇就够了]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
